<% var renderMethod = pageInfo.mainComp&&pageInfo.mainComp.methods.filter(item=>item.name =="render")[0]; %>
import * as React from 'react';
import { connect } from 'react-redux';
import './index.less';
import * as T from './types';
import actions from './actions';
import {store2Props} from "./selectors";
<%-(renderMethod||{}).imports%>

 <% pageInfo.subComps.forEach(subComp=>{ %>
import <%=Util.toUCamelize(subComp.fileName)%> from "./components/<%=subComp.fileName%>"; %>
 <% }) %>

@connect<Partial<T.IProps>, any>(store2Props,actions)
export default class <%=className%> extends React.Component<Partial<T.IProps>, any> {

  componentDidMount() {
<%-(pageInfo.mainComp&&pageInfo.mainComp.methods.filter(item=>item.name =="componentDidMount")[0]||{}).content%>
    this.props.actions.init();
  }

  componentWillUnmount() {
    this.props.actions.clean();
  }

  render() {
    let {actions:{
        <% pageInfo.actions.forEach(action=>{ %>
            <%=Util.toLCamelize(action.fileName) %> ,
        <% }) %>
    },<% pageInfo.actors.forEach(actor=>{ %>
                    <%=Util.toLCamelize(actor.fileName)%> ,
      <% }) %>
    } =  this.props;

    <% if ((renderMethod||{}).content) { %>
    <%-(renderMethod||{}).content %>
    <% }  else {%>
    return (
    <div className="<%=instanceName%>">
      <div/>
    </div>
    );
    <% } %>
  }
}


//create by moon https://github.com/creasy2010/moon



